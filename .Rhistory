identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector[1:20]
my_vector <- c[1:20]
skip()
my-vector
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c()4,5
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(mym_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_vector <- my_matrix
skip()
?matrix()
?matrix
skip()
identical(my_matrix,my_matrix2)
skip()
cbind(pateints,my_matrix)
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cname <- c("patient", "age", "weight", "bp", "rating", "test")
skip()
skip()
my_data
swirl()
bye()
q()
library(swirl)
swirl()
TRUE == FALSE
TRUE == TRUE
(FALSE == TRUE)== FALSE
6 ==7
6 < 7
10 <= 10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,TRUE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c (TRUE,FALSE,FALSE)
TRUE| c (TRUE,FALSE,FALSE)
TRUE || c (TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical ('twins' , 'twins')
xor(5==6, !FALSE)
ints <- sample (10)
ints
innts >5
ints >5
which(ints >7)
any(ints<0)
all(ints>0)
14
bye()
q()
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
submit()
boring_function('My first function'0
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
reminder(11,5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()'
submit()
submit()
evaluate(standard deviation, c(1.4,3.6,7.9,8.8))
evaluate('standard deviation', c(1.4,3.6,7.9,8.8))
evaluate(sd , c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1} ,6)
evaluate(function(x){x+1} ,c(8,4,0))
evaluate(function(x){x} ,c(8,4,0))
evaluate(x ,c(8,4,0))
evaluate(function(x){x[1]} ,c(8,4,0))
evaluate(function(x){x[3]} ,c(8,4,0))
evaluate(function(x){x[x]} ,c(8,4,0))
evaluate(function(x){tail(x,1)} ,c(8,4,0))
?paste
paste("Programming", "is", "fun!", sep=" ")
submit()
submit()
submit()
telegram(good morning)
telegram("good morning")
submit()
submit()
submit()
submit()
mad_libs(adj = "is", "trichy" , "on")
play()
mad_libs(adj = "is", "trichy" , "on")
mad_libs( "trichy" ,"is", "on")
mad_libs( trichy ,is, on)
mad_libs( "trichy" ,"is", "on")
nxt()
submit()
submit()
%P('I, LOVE','R!')
%p('I, LOVE','R!')
%p("I, LOVE","R!")
%p('I', 'LOVE','R!')
%p%('I', 'LOVE','R!')
%p%("I, LOVE","R!")
%p%("I, LOVE","R!")
skip()
d1 <- Sys.Date()
d1
class(d1)
unnclass(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t20
)'
quarters(t20)
quarters(t2)
t3<- c("October 17 ,1986 08:24")
t3<- "October 17 ,1986 08:24"
t3<- "October 17 , 1986 08:24"
skip()
strptime(t3, "%B %d, %Y %H:%M")
t4<- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftinme(Sys.time() ,t1,units='days')
difftime(Sys.time() ,t1,units='days')
bye()
q()
best("SC", "heart attack")
getwd()
setwd("E:/directorycoursera")
ls()
list.files()
helper <- function(data, col_num, state) {
state_subset <- data[data[, 7]==state, ]
outcome_arr <- state_subset[, col_num]
min <- min(outcome_arr, na.rm=T)
min_index <- which(outcome_arr == min)
hosp_name <- state_subset[min_index, 2]
return(hosp_name)
}
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
# read the data file
directory <- "./data/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
# change data type from character to numeric
data[, 11] <- as.numeric(data[, 11]) # heart attack
data[, 17] <- as.numeric(data[, 17]) # heart failure
data[, 23] <- as.numeric(data[, 23]) # pneumonia
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data$State) {
stop("invalid state")
} else if(!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
if(outcome == "heart attack") {
hosp_name <- helper(data, 11, state)
} else if(outcome == "heart failure") {
hosp_name <- helper(data, 17, state)
} else {
hosp_name <- helper(data, 23, state)
}
result <- hosp_name
return(result)
}
}
best("SC", "heart attack")
best("SC", "heart attack")
best("SC", "heart attack")
helper <- function(data, col_num, state) {
state_subset <- data[data[, 7]==state, ]
outcome_arr <- state_subset[, col_num]
min <- min(outcome_arr, na.rm=T)
min_index <- which(outcome_arr == min)
hosp_name <- state_subset[min_index, 2]
return(hosp_name)
}
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
# read the data file
directory <- "./E:/directorycoursera/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
# change data type from character to numeric
data[, 11] <- as.numeric(data[, 11]) # heart attack
data[, 17] <- as.numeric(data[, 17]) # heart failure
data[, 23] <- as.numeric(data[, 23]) # pneumonia
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data$State) {
stop("invalid state")
} else if(!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
if(outcome == "heart attack") {
hosp_name <- helper(data, 11, state)
} else if(outcome == "heart failure") {
hosp_name <- helper(data, 17, state)
} else {
hosp_name <- helper(data, 23, state)
}
result <- hosp_name
return(result)
}
}
best("SC", "heart attack")
best("SC", "heart attack")
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
# read the data file
directory <- "./data/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
# change data type from character to numeric
data[, 11] <- as.numeric(data[, 11]) # heart attack
data[, 17] <- as.numeric(data[, 17]) # heart failure
data[, 23] <- as.numeric(data[, 23]) # pneumonia
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data$State) {
stop("invalid state")
} else if(!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
if(outcome == "heart attack") {
hosp_name <- helper(data, 11, state)
} else if(outcome == "heart failure") {
hosp_name <- helper(data, 17, state)
} else {
hosp_name <- helper(data, 23, state)
}
result <- hosp_name
return(result)
}
}
best("sc", "heart attack")
best("SC", "heart attack")
helper <- function(data, col_num, state) {
state_subset <- data[data[, 7]==state, ]
outcome_arr <- state_subset[, col_num]
min <- min(outcome_arr, na.rm=T)
min_index <- which(outcome_arr == min)
hosp_name <- state_subset[min_index, 2]
return(hosp_name)
}
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
# read the data file
directory <- "./directorycoursera/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
# change data type from character to numeric
data[, 11] <- as.numeric(data[, 11]) # heart attack
data[, 17] <- as.numeric(data[, 17]) # heart failure
data[, 23] <- as.numeric(data[, 23]) # pneumonia
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data$State) {
stop("invalid state")
} else if(!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
if(outcome == "heart attack") {
hosp_name <- helper(data, 11, state)
} else if(outcome == "heart failure") {
hosp_name <- helper(data, 17, state)
} else {
hosp_name <- helper(data, 23, state)
}
result <- hosp_name
return(result)
}
}
best("SC", "heart attack")
setwd("E:/directorycoursera")
list.files()
helper <- function(data, col_num, state) {
state_subset <- data[data[, 7]==state, ]
outcome_arr <- state_subset[, col_num]
min <- min(outcome_arr, na.rm=T)
min_index <- which(outcome_arr == min)
hosp_name <- state_subset[min_index, 2]
return(hosp_name)
}
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
# read the data file
directory <- "./directorycoursera/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
# change data type from character to numeric
data[, 11] <- as.numeric(data[, 11]) # heart attack
data[, 17] <- as.numeric(data[, 17]) # heart failure
data[, 23] <- as.numeric(data[, 23]) # pneumonia
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data$State) {
stop("invalid state")
} else if(!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
if(outcome == "heart attack") {
hosp_name <- helper(data, 11, state)
} else if(outcome == "heart failure") {
hosp_name <- helper(data, 17, state)
} else {
hosp_name <- helper(data, 23, state)
}
result <- hosp_name
return(result)
}
}
best("SC", "heart attack")
setwd("E:/directorycoursera")
list.files()
helper <- function(data, col_num, state) {
state_subset <- data[data[, 7]==state, ]
outcome_arr <- state_subset[, col_num]
min <- min(outcome_arr, na.rm=T)
min_index <- which(outcome_arr == min)
hosp_name <- state_subset[min_index, 2]
return(hosp_name)
}
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
# read the data file
directory <- "./data/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
# change data type from character to numeric
data[, 11] <- as.numeric(data[, 11]) # heart attack
data[, 17] <- as.numeric(data[, 17]) # heart failure
data[, 23] <- as.numeric(data[, 23]) # pneumonia
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data$State) {
stop("invalid state")
} else if(!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
if(outcome == "heart attack") {
hosp_name <- helper(data, 11, state)
} else if(outcome == "heart failure") {
hosp_name <- helper(data, 17, state)
} else {
hosp_name <- helper(data, 23, state)
}
result <- hosp_name
return(result)
}
}
best("SC", "heart attack")
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states <- unique(df$State)
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(state %in% states)) {
stop("invalid state")
}
if (!(outcome %in% outcomes)) {
stop("invalid outcome")
}
df2 <- df[df$State == state, ]
df2[, c(11, 17, 23)] <- sapply(df2[, c(11, 17, 23)], as.numeric)
df2 <- df2[order(df2[, 2]), ]
if (outcome == "heart attack") {
best <- df2[which.min(df2[, 11]), "Hospital.Name"]
}
else if (outcome == "heart failure") {
best <- df2[which.min(df2[, 17]), "Hospital.Name"]
}
else {
best <- df2[which.min(df2[, 23]), "Hospital.Name"]
}
best
}
best("SC","heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
states <- unique(df$State)
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(state %in% states)) {
stop("invalid state")
}
if (!(outcome %in% outcomes)) {
stop("invalid outcome")
}
df2 <- df[df$State == state, ]
if (outcome == "heart attack") {
df2 <- df2[order(df2[, 3], df2[, 1]), ]
df2 <- df2[!is.na(df2[, 3]), ]
}
else if (outcome == "heart failure") {
df2 <- df2[order(df2[, 4], df2[, 1]), ]
df2 <- df2[!is.na(df2[, 4]), ]
}
else {
df2 <- df2[order(df2[, 5], df2[, 1]), ]
df2 <- df2[!is.na(df2[, 5]), ]
}
if (num == "best") {
num <- 1L
}
else if (num == "worst") {
num <- nrow(df2)
}
else {
num <- as.numeric(num)
}
df2[num, 1]
}
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- df[c(2, 7, 11, 17, 23)]
df[, c(3, 4, 5)] <- sapply(df[, c(3, 4, 5)], as.numeric)
state <- "AK"
outcome <- "heart failure"
num <- 10L
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
states <- unique(df$State)
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(state %in% states)) {
stop("invalid state")
}
if (!(outcome %in% outcomes)) {
stop("invalid outcome")
}
df2 <- df[df$State == state, ]
if (outcome == "heart attack") {
df2 <- df2[order(df2[, 3], df2[, 1]), ]
df2 <- df2[!is.na(df2[, 3]), ]
}
else if (outcome == "heart failure") {
df2 <- df2[order(df2[, 4], df2[, 1]), ]
df2 <- df2[!is.na(df2[, 4]), ]
}
else {
df2 <- df2[order(df2[, 5], df2[, 1]), ]
df2 <- df2[!is.na(df2[, 5]), ]
}
if (num == "best") {
num <- 1L
}
else if (num == "worst") {
num <- nrow(df2)
}
else {
num <- as.numeric(num)
}
df2[num, 1]
}
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
