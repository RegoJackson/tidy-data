TRUE == TRUE
(FALSE == TRUE)== FALSE
6 ==7
6 < 7
10 <= 10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,TRUE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c (TRUE,FALSE,FALSE)
TRUE| c (TRUE,FALSE,FALSE)
TRUE || c (TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical ('twins' , 'twins')
xor(5==6, !FALSE)
ints <- sample (10)
ints
innts >5
ints >5
which(ints >7)
any(ints<0)
all(ints>0)
14
bye()
q()
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
submit()
boring_function('My first function'0
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
reminder(11,5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()'
submit()
submit()
evaluate(standard deviation, c(1.4,3.6,7.9,8.8))
evaluate('standard deviation', c(1.4,3.6,7.9,8.8))
evaluate(sd , c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1} ,6)
evaluate(function(x){x+1} ,c(8,4,0))
evaluate(function(x){x} ,c(8,4,0))
evaluate(x ,c(8,4,0))
evaluate(function(x){x[1]} ,c(8,4,0))
evaluate(function(x){x[3]} ,c(8,4,0))
evaluate(function(x){x[x]} ,c(8,4,0))
evaluate(function(x){tail(x,1)} ,c(8,4,0))
?paste
paste("Programming", "is", "fun!", sep=" ")
submit()
submit()
submit()
telegram(good morning)
telegram("good morning")
submit()
submit()
submit()
submit()
mad_libs(adj = "is", "trichy" , "on")
play()
mad_libs(adj = "is", "trichy" , "on")
mad_libs( "trichy" ,"is", "on")
mad_libs( trichy ,is, on)
mad_libs( "trichy" ,"is", "on")
nxt()
submit()
submit()
%P('I, LOVE','R!')
%p('I, LOVE','R!')
%p("I, LOVE","R!")
%p('I', 'LOVE','R!')
%p%('I', 'LOVE','R!')
%p%("I, LOVE","R!")
%p%("I, LOVE","R!")
skip()
d1 <- Sys.Date()
d1
class(d1)
unnclass(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t20
)'
quarters(t20)
quarters(t2)
t3<- c("October 17 ,1986 08:24")
t3<- "October 17 ,1986 08:24"
t3<- "October 17 , 1986 08:24"
skip()
strptime(t3, "%B %d, %Y %H:%M")
t4<- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftinme(Sys.time() ,t1,units='days')
difftime(Sys.time() ,t1,units='days')
bye()
q()
getwd()
setwd("D:/directorycoursera/UCI HAR Dataset")
setwd("D:/directorycoursera")
setwd("D:/directorycoursera/")
getwd()
ls
list()
packages <- c("data.table", "reshape2")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
path <- getwd()
pathIn <- file.path(path, "UCI HAR Dataset")
list.files(pathIn, recursive=TRUE)
##The archive put the files in a folder named UCI HAR Dataset. Set this folder as the input path. List the files here.
pathIn <- file.path(path, "UCI HAR Dataset")
list.files(pathIn, recursive=TRUE)
##See the README.txt file in r path for detailed information on the dataset.
##For the purposes of this project, the files in the Inertial Signals folders are not used.
##Read the files
##Read the subject files.
dtSubjectTrain <- fread(file.path(pathIn, "train", "subject_train.txt"))
dtSubjectTest  <- fread(file.path(pathIn, "test" , "subject_test.txt" ))
Read the activity files. For some reason, these are called label files in the README.txt documentation.
dtActivityTrain <- fread(file.path(pathIn, "train", "Y_train.txt"))
dtActivityTest  <- fread(file.path(pathIn, "test" , "Y_test.txt" ))
##Read the data files. fread seems to be giving me some trouble reading files. Using a helper function, read the file with read.table instead, then convert the resulting data frame to a data table. Return the data table.
fileToDataTable <- function (f) {
df <- read.table(f)
dt <- data.table(df)
}
dtTrain <- fileToDataTable(file.path(pathIn, "train", "X_train.txt"))
dtTest  <- fileToDataTable(file.path(pathIn, "test" , "X_test.txt" ))
##Merge the training and the test sets
##Concatenate the data tables.
dtSubject <- rbind(dtSubjectTrain, dtSubjectTest)
setnames(dtSubject, "V1", "subject")
dtActivity <- rbind(dtActivityTrain, dtActivityTest)
setnames(dtActivity, "V1", "activityNum")
dt <- rbind(dtTrain, dtTest)
##Merge columns.
dtSubject <- cbind(dtSubject, dtActivity)
dt <- cbind(dtSubject, dt)
##Set key.
setkey(dt, subject, activityNum)
##Extract only the mean and standard deviation
##Read the features.txt file. This tells which variables in dt are measurements for the mean and standard deviation.
dtFeatures <- fread(file.path(pathIn, "features.txt"))
setnames(dtFeatures, names(dtFeatures), c("featureNum", "featureName"))
##Subset only measurements for the mean and standard deviation.
dtFeatures <- dtFeatures[grepl("mean\\(\\)|std\\(\\)", featureName)]
##Convert the column numbers to a vector of variable names matching columns in dt.
dtFeatures$featureCode <- dtFeatures[, paste0("V", featureNum)]
head(dtFeatures)
dtFeatures$featureCode
##Subset these variables using variable names.
select <- c(key(dt), dtFeatures$featureCode)
dt <- dt[, select, with=FALSE]
##Use descriptive activity names
##Read activity_labels.txt file. This will be used to add descriptive names to the activities.
dtActivityNames <- fread(file.path(pathIn, "activity_labels.txt"))
setnames(dtActivityNames, names(dtActivityNames), c("activityNum", "activityName"))
##Label with descriptive activity names
##Merge activity labels.
dt <- merge(dt, dtActivityNames, by="activityNum", all.x=TRUE)
##Add activityName as a key.
setkey(dt, subject, activityNum, activityName)
##Melt the data table to reshape it from a short and wide format to a tall and narrow format.
dt <- data.table(melt(dt, key(dt), variable.name="featureCode"))
##Merge activity name.
dt <- merge(dt, dtFeatures[, list(featureNum, featureCode, featureName)], by="featureCode", all.x=TRUE)
##Create a new variable, activity that is equivalent to activityName as a factor class. Create a new variable, feature that is equivalent to featureName as a factor class.
dt$activity <- factor(dt$activityName)
dt$feature <- factor(dt$featureName)
##Seperate features from featureName using the helper function grepthis.
grepthis <- function (regex) {
grepl(regex, dt$feature)
}
## Features with 2 categories
n <- 2
y <- matrix(seq(1, n), nrow=n)
x <- matrix(c(grepthis("^t"), grepthis("^f")), ncol=nrow(y))
dt$featDomain <- factor(x %*% y, labels=c("Time", "Freq"))
x <- matrix(c(grepthis("Acc"), grepthis("Gyro")), ncol=nrow(y))
dt$featInstrument <- factor(x %*% y, labels=c("Accelerometer", "Gyroscope"))
x <- matrix(c(grepthis("BodyAcc"), grepthis("GravityAcc")), ncol=nrow(y))
dt$featAcceleration <- factor(x %*% y, labels=c(NA, "Body", "Gravity"))
x <- matrix(c(grepthis("mean()"), grepthis("std()")), ncol=nrow(y))
dt$featVariable <- factor(x %*% y, labels=c("Mean", "SD"))
## Features with 1 category
dt$featJerk <- factor(grepthis("Jerk"), labels=c(NA, "Jerk"))
dt$featMagnitude <- factor(grepthis("Mag"), labels=c(NA, "Magnitude"))
## Features with 3 categories
n <- 3
y <- matrix(seq(1, n), nrow=n)
x <- matrix(c(grepthis("-X"), grepthis("-Y"), grepthis("-Z")), ncol=nrow(y))
dt$featAxis <- factor(x %*% y, labels=c(NA, "X", "Y", "Z"))
##Check to make sure all possible combinations of feature are accounted for by all possible combinations of the factor class variables.
r1 <- nrow(dt[, .N, by=c("feature")])
r2 <- nrow(dt[, .N, by=c("featDomain", "featAcceleration", "featInstrument", "featJerk", "featMagnitude", "featVariable", "featAxis")])
r1 == r2
##Yes, I accounted for all possible combinations. feature is now redundant.
##Create a tidy data set
##Create a data set with the average of each variable for each activity and each subject.
setkey(dt, subject, activity, featDomain, featAcceleration, featInstrument, featJerk, featMagnitude, featVariable, featAxis)
dtTidy <- dt[, list(count = .N, average = mean(value)), by=key(dt)]
##Make codebook.
knit("makeCodebook.Rmd", output="codebook.md", encoding="ISO8859-1", quiet=TRUE)
markdownToHTML("codebook.md", "codebook.html")
library(swirl)
swirl()
read.csv(path2csv,stringsAsFactors = FALSE)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf,10)
head(mydf)
librry(dplyr)
library(dplyr)
packageversion(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
cran[5:20]
cran(5:20)
cran
5;20
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran , -time)
select(cran,-(X:size))
select(cran,-X:size)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package == "swirl")
filter(cran,r_version =="3.1.1", country == "US")
?Comparison
filter(cran,r_version =="3.0.2", country == "IN")
filter(cran,r_version <="3.0.2", country == "IN")
filter(country =="Us" | country == "IN")
filter(cran ,country =="Us" | country == "IN")
filter(cran ,country == "US" | country == "IN")
filter(cran, size > 100500 | r_os =="linux-gnu")
filter(cran, size > 100500 , r_os =="linux-gnu")
is.na(c(3,5,na,10))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran ,!is.na(r_version))
cran2 <- select(cran , size:ip_id)
arrange(cran2,ip_id)
desc(cran,ip_id)
desc(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,(descr_version),ip_id)
arrange(cran2,country,desc(r_version),ip_id)
select(cran,ip_id,package,size0
)
select(cran,ip_id,package,size)
cran3 <-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb= size / 2^20)
mutate(cran3,size_mb= size / 2^20,size_gb = size_mb/2^20)
mutate(cran3,size_mb= size / 2^20,size_gb = size_mb/2^10)
mutate(cran3,correct_size = 1000+ size))
mutate(cran3,correct_size = 1000+ size)
cran3
mutate(cran3,correct_size= 1000 +(size,size_mb= size / 2^20,size_gb = size_mb/2^10))
skip()
summarize(cran,avg_bytes + mean(size))
summarize(cran,avg_bytes = mean(size))
q()
library(swirl)
rm(list=ls())
ls()
swirl()
library(dplyr)
cran <- tbl_df(mydf)
mydf
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit(pack_size)
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_couunts <- filter(pack_sum,count > 679)
top_counts <- filter(pack_sum,count > 679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts,count)
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
filter(pack_sum,unique>465)
top_unique <- filter(pack_sum,unique>465)
view(top_unique)
View(top_unique)
arrange(top_unique,desc(unique))
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(resut3)
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
q()
library(swirl)
swirl()
swirl()
library(tidyr)
students
?gather
gatherr(students,sex,count,-grade)
gather(students,sex,count,-grade)
students2
res <- gather(students2 , sex_class ,count,-grade)
res
?seperate
?seperate
?separate
?separate
speratae(res, sex_class, c("sex","class"))
separate(res, sex_class, c("sex","class"))
submit()
bye()
q()
library(swirl)
swirl()
student3
students3
submit()
?gather
submit()
?spreaad
?spread
submit()
submit()
submit()
submit()
skip()
library(readr)
parse_number("class5" )
submit()
skip()
students4
submit()
submit()
skip()
submit()
passed
failed
mutate(passed,status ="passed")
passed <- mutate(passed,status ="passed")
failed <- failed %>% mutate(status ="failed")
failed <- failed %>% mutate(status ="failed")%>print%
failed <- failed %>% mutate(status ="failed")%>% print
failed <- failed %>% mutate(status ="failed")%>% print
bind_row(passed,failed)
bind_rows (passed,failed)
sat
?sperate
?separate
submit()
skip()
submit()
submit()
q()
##The archive put the files in a folder named UCI HAR Dataset. Set this folder as the input path. List the files here.
pathIn <- file.path(path, "UCI HAR Dataset")
list.files(pathIn, recursive=TRUE)
##See the README.txt file in r path for detailed information on the dataset.
##For the purposes of this project, the files in the Inertial Signals folders are not used.
##Read the files
##Read the subject files.
dtSubjectTrain <- fread(file.path(pathIn, "train", "subject_train.txt"))
dtSubjectTest  <- fread(file.path(pathIn, "test" , "subject_test.txt" ))
Read the activity files. For some reason, these are called label files in the README.txt documentation.
dtActivityTrain <- fread(file.path(pathIn, "train", "Y_train.txt"))
dtActivityTest  <- fread(file.path(pathIn, "test" , "Y_test.txt" ))
##Read the data files. fread seems to be giving me some trouble reading files. Using a helper function, read the file with read.table instead, then convert the resulting data frame to a data table. Return the data table.
fileToDataTable <- function (f) {
df <- read.table(f)
dt <- data.table(df)
}
dtTrain <- fileToDataTable(file.path(pathIn, "train", "X_train.txt"))
dtTest  <- fileToDataTable(file.path(pathIn, "test" , "X_test.txt" ))
##Merge the training and the test sets
##Concatenate the data tables.
dtSubject <- rbind(dtSubjectTrain, dtSubjectTest)
setnames(dtSubject, "V1", "subject")
dtActivity <- rbind(dtActivityTrain, dtActivityTest)
setnames(dtActivity, "V1", "activityNum")
dt <- rbind(dtTrain, dtTest)
##Merge columns.
dtSubject <- cbind(dtSubject, dtActivity)
dt <- cbind(dtSubject, dt)
##Set key.
setkey(dt, subject, activityNum)
##Extract only the mean and standard deviation
##Read the features.txt file. This tells which variables in dt are measurements for the mean and standard deviation.
dtFeatures <- fread(file.path(pathIn, "features.txt"))
setnames(dtFeatures, names(dtFeatures), c("featureNum", "featureName"))
##Subset only measurements for the mean and standard deviation.
dtFeatures <- dtFeatures[grepl("mean\\(\\)|std\\(\\)", featureName)]
##Convert the column numbers to a vector of variable names matching columns in dt.
dtFeatures$featureCode <- dtFeatures[, paste0("V", featureNum)]
head(dtFeatures)
dtFeatures$featureCode
##Subset these variables using variable names.
select <- c(key(dt), dtFeatures$featureCode)
dt <- dt[, select, with=FALSE]
##Use descriptive activity names
##Read activity_labels.txt file. This will be used to add descriptive names to the activities.
dtActivityNames <- fread(file.path(pathIn, "activity_labels.txt"))
setnames(dtActivityNames, names(dtActivityNames), c("activityNum", "activityName"))
##Label with descriptive activity names
##Merge activity labels.
dt <- merge(dt, dtActivityNames, by="activityNum", all.x=TRUE)
##Add activityName as a key.
setkey(dt, subject, activityNum, activityName)
##Melt the data table to reshape it from a short and wide format to a tall and narrow format.
dt <- data.table(melt(dt, key(dt), variable.name="featureCode"))
##Merge activity name.
dt <- merge(dt, dtFeatures[, list(featureNum, featureCode, featureName)], by="featureCode", all.x=TRUE)
##Create a new variable, activity that is equivalent to activityName as a factor class. Create a new variable, feature that is equivalent to featureName as a factor class.
dt$activity <- factor(dt$activityName)
dt$feature <- factor(dt$featureName)
##Seperate features from featureName using the helper function grepthis.
grepthis <- function (regex) {
grepl(regex, dt$feature)
}
## Features with 2 categories
n <- 2
y <- matrix(seq(1, n), nrow=n)
x <- matrix(c(grepthis("^t"), grepthis("^f")), ncol=nrow(y))
dt$featDomain <- factor(x %*% y, labels=c("Time", "Freq"))
x <- matrix(c(grepthis("Acc"), grepthis("Gyro")), ncol=nrow(y))
dt$featInstrument <- factor(x %*% y, labels=c("Accelerometer", "Gyroscope"))
x <- matrix(c(grepthis("BodyAcc"), grepthis("GravityAcc")), ncol=nrow(y))
dt$featAcceleration <- factor(x %*% y, labels=c(NA, "Body", "Gravity"))
x <- matrix(c(grepthis("mean()"), grepthis("std()")), ncol=nrow(y))
dt$featVariable <- factor(x %*% y, labels=c("Mean", "SD"))
## Features with 1 category
dt$featJerk <- factor(grepthis("Jerk"), labels=c(NA, "Jerk"))
dt$featMagnitude <- factor(grepthis("Mag"), labels=c(NA, "Magnitude"))
## Features with 3 categories
n <- 3
y <- matrix(seq(1, n), nrow=n)
x <- matrix(c(grepthis("-X"), grepthis("-Y"), grepthis("-Z")), ncol=nrow(y))
dt$featAxis <- factor(x %*% y, labels=c(NA, "X", "Y", "Z"))
##Check to make sure all possible combinations of feature are accounted for by all possible combinations of the factor class variables.
r1 <- nrow(dt[, .N, by=c("feature")])
r2 <- nrow(dt[, .N, by=c("featDomain", "featAcceleration", "featInstrument", "featJerk", "featMagnitude", "featVariable", "featAxis")])
r1 == r2
##Yes, I accounted for all possible combinations. feature is now redundant.
##Create a tidy data set
##Create a data set with the average of each variable for each activity and each subject.
setkey(dt, subject, activity, featDomain, featAcceleration, featInstrument, featJerk, featMagnitude, featVariable, featAxis)
dtTidy <- dt[, list(count = .N, average = mean(value)), by=key(dt)]
getwd()
ls()
setwd("C:/Users/A.REGO JACKSON/dataset")
getwd()
getwd()
ls()
students4
setwd("E:/directorycoursera/ucidata")
ls()
result1
list()
